
/**
 * Copyright (C) 2002 Michael Green <mtgreen@cs.ucsd.edu>
 * 
 * Copyright (C) 2002 Paul Kube <kube@cs.ucsd.edu>
 * 
 * Copyright (C) 2005 Owen Astrachan <ola@cs.duke.edu>
 * 
 * Copyright (C) 2011 Hoa Long Tam <hoalong.tam@berkeley.edu> and Armin Samii
 * <samii@berkeley.edu>
 * 
 * This file is part of CS Boggle.
 * 
 * CS Boggle is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * CS Boggle is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * CS boggle. If not, see <http://www.gnu.org/licenses/>.
 */

public class AutoPlayerBoardFirst extends AbstractPlayer {
  
  public AutoPlayerBoardFirst(LexiconInterface lex) {
    this.initialize(lex);
  }
  
  /**
   * Find all the valid words automatically, found words should be added via the
   * <code>AbstractPlayer</code>'s <code>add</code> method.
   * 
   * @param board
   *          is the BoggleBoard on which words are found
   * @param lex
   *          is the lexicon in which words are searched/validated
   * @param minLength
   *          of words found by an autoplayer
   */
  public void findAllValidWords(BoggleBoard board, LexiconInterface lex,
                                int minLength) {
    /* TODO: Given a board and a lexicon, use the add() in AbstractPlayer.java
     * to add all words that are both in the board and in the lexicon.
     * 
     * This method will run after the human player finishes entering words. */
	  if (lex instanceof LexiconTrie) {
		  //Go through every cell in the board
		  for (int r=0; r < board.size(); r++) {
			  for (int c=0; c< board.size(); c++) {
				  helper(board, lex, r, c, "");
			  }
		  }
	  }
  }
  
  //Starting at cell r,c in board, check if sofar + the cell's face is in the lexicon.
  //If yes, add the word to this.
  //If no, check if sofar + the cell's face is a prefix in the lexicon. If it is, call the helper
  //on every cell surrounding the cell.
  public void helper(BoggleBoard b, LexiconInterface lex, int r, int c, String sofar) {
	    //Letter at r,c is the last letter of a word in lexicon
		if (lex.containsPrefix(sofar + b.getFace(r,c)) && lex.contains(sofar + b.getFace(r,c))) {
			this.add(sofar+b.getFace(r,c));
		} 
		//Letter at r,c is the last letter of a prefix in lexicon
		if (lex.containsPrefix(sofar +b.getFace(r,c))) {
			sofar+=b.getFace(r,c);
			for (int row=r-1; row<r+2; row++) {
				for (int col=c-1; col<c+2; col++) {
					//Ensures that our pointer does not run off the board.
					if (row>=0 && row<b.size() && col>=0 && col<b.size()) {
						helper(b, lex, row, col, sofar);
					}
				}
			}
		}
	}

  
  @Override
  public String getName() {
    return "AutoPlayer";
  }
}
