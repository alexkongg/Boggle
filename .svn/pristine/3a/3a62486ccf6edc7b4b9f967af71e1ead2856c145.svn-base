/**
 * Copyright (C) 2002 Michael Green <mtgreen@cs.ucsd.edu>
 * 
 * Copyright (C) 2002 Paul Kube <kube@cs.ucsd.edu>
 * 
 * Copyright (C) 2005 Owen Astrachan <ola@cs.duke.edu>
 * 
 * Copyright (C) 2011 Hoa Long Tam <hoalong.tam@berkeley.edu> and Armin Samii
 * <samii@berkeley.edu>
 * 
 * This file is part of CS Boggle.
 * 
 * CS Boggle is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * CS Boggle is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * CS boggle. If not, see <http://www.gnu.org/licenses/>.
 */
import java.util.*;

public class AutoPlayerLexiconFirst extends AbstractPlayer {
  
  public AutoPlayerLexiconFirst(LexiconInterface lex) {
    this.initialize(lex);
  }
  
  /**
   * Find all the valid words automatically, found words should be added via the
   * <code>AbstractPlayer</code>'s <code>add</code> method.
   * 
   * @param board
   *          is the BoggleBoard on which words are found
   * @param lex
   *          is the lexicon in which words are searched/validated
   * @param minLength
   *          of words found by an autoplayer
   */
  public void findAllValidWords(BoggleBoard board, LexiconInterface lex,
                                int minLength) {
    /* TODO: Given a board and a lexicon, use the add() in AbstractPlayer.java
     * to add all words that are both in the board and in the lexicon.
     * 
     * This method will run after the human player finishes entering words. */
	// Use WordOnBoardFinder.java to search board for all words >= minLength in lexicon
	// will give coordinates, use coordinates to get word
	  WordOnBoardFinder myFinder = new WordOnBoardFinder();
	  // there is probably a simpler way of doing this but just putting it to at least have a method
	  // if lexicon is an ArrayList
	  if (lex instanceof ArrayList) {
		  LexiconArrayList lexicon = (LexiconArrayList) lex;
		  for (int k = 0; k < lexicon.myDictionary.size(); k++) {
			  List<BoardCell> coords = myFinder.cellsForWord(board, lexicon.myDictionary.get(k));
			  String word = "";
			  // maybe check if null or incomplete word here?
			  for (BoardCell cell : coords) {
				  word += board.getFace(cell.row, cell.col);
			  }
			  if (word.length() >= minLength) {
				  this.add(word);
			  }
		  }
	  }
	  else {
		  LexiconTrie lexicon = (LexiconTrie) lex;
		  while (lexicon.myDictionary.myChildren != null) {
			  List<BoardCell> coords = myFinder.cellsForWord(board, lexicon.myDictionary.getFirstLetter(letter);
			  String word = "";
		  }
		  
	  }
  }
  
  @Override
  public String getName() {
    return "AutoPlayer";
  }
}
